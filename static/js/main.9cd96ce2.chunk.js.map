{"version":3,"sources":["canvas.js","tetronimos.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colorSquares","tetronimo","props","current","console","log","ctx","canvas","getContext","lineWidth","clearRect","beginPath","fillStyle","i","j","rect","fill","closePath","_this2","react_default","a","createElement","className","width","height","ref","Component","O","shape","topLeft","row","col","App","test","newArray","state","board","setState","currentTetro","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cd96ce2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\n\r\nclass Canvas extends Component{\r\n  constructor(){\r\n    super();\r\n    this.canvas = null;\r\n  }\r\n  componentDidUpdate(){\r\n    this.colorSquares();\r\n  }\r\n  componentDidMount(){\r\n    this.colorSquares();\r\n  }\r\n  colorSquares = () =>{\r\n    let tetronimo = this.props.current;\r\n    console.log(tetronimo)\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.lineWidth = '0'\r\n    //clear the canvas before redrawing\r\n    ctx.clearRect(0,0,350,560)\r\n    ctx.beginPath()\r\n    ctx.fillStyle = 'orange'\r\n    for(let i= 0; i< 16; i++){\r\n      for(let j = 0; j< 10; j++){\r\n        ctx.rect(i*36, j*36, 35,35)\r\n      }\r\n    }\r\n    ctx.fill()\r\n    ctx.closePath();\r\n    //draw in the sqaures already on the board\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className = 'board'>\r\n        <canvas width = '350' height = \"560\" ref = {(ref)=> this.canvas = ref}></canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Canvas\r\n","class O  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\nclass I  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\n\r\nclass J  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\nclass L  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\nclass Z  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\nclass S {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\nclass T  {\r\n  constructor(){\r\n    this.shape = [[1,1],\r\n                  [1,1]];\r\n    this.topLeft = {row: 0, col: 4};\r\n  }\r\n}\r\n\r\n\r\nexport { O }\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Canvas from './canvas.js';\nimport { O } from './tetronimos.js'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      board: [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n      ],\n      currentTetro: new O(),\n    }\n  }\n  componentDidMount(){\n    let currentTetro = new O();\n    this.setState({currentTetro: currentTetro})\n  }\n  test = () => {\n    let newArray =  this.state.board;\n    newArray[0][0] = 1;\n    this.setState({board: newArray})\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Canvas board = {this.state.board} current = {this.state.currentTetro}/>\n        <button onClick = {this.test}>Test</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}